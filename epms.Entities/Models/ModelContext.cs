using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace epms.Entities.Models
{


    // ------------------------------------------------------------------------------------------------
    // This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
    // Created by Simon Hughes (https://about.me/simon.hughes).
    //
    // Do not make changes directly to this file - edit the template instead.
    //
    // The following connection settings were used to generate this file:
    //     Configuration file:     "F:\asp.net\EPMS\epms.DataTest\App.config"
    //     Connection String Name: "MyDbContext"
    //     Connection String:      "Server= 127.0.0.1;Database=TestDB;User Id=sa;password=**zapped**;;"
    // ------------------------------------------------------------------------------------------------
    // Database Edition       : Data Center Edition
    // Database Engine Edition: Enterprise

    // <auto-generated>
    // ReSharper disable ConvertPropertyToExpressionBody
    // ReSharper disable DoNotCallOverridableMethodsInConstructor
    // ReSharper disable EmptyNamespace
    // ReSharper disable InconsistentNaming
    // ReSharper disable PartialMethodWithSinglePart
    // ReSharper disable PartialTypeWithSinglePart
    // ReSharper disable RedundantNameQualifier
    // ReSharper disable RedundantOverridenMember
    // ReSharper disable UseNameofExpression
    // TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


    namespace epms.DataTest
    {
        using System.Linq;

        #region Unit of work

        public interface IMyDbContext : System.IDisposable
        {
            System.Data.Entity.DbSet<AccountCategory> AccountCategories { get; set; } // AccountCategory
            System.Data.Entity.DbSet<AccountGroup> AccountGroups { get; set; } // AccountGroup
            System.Data.Entity.DbSet<AccountMaster> AccountMasters { get; set; } // AccountMaster
            System.Data.Entity.DbSet<BalanceSheetConfiguration> BalanceSheetConfigurations { get; set; } // BalanceSheetConfiguration
            System.Data.Entity.DbSet<Branch> Branches { get; set; } // Branch
            System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
            System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer

            int SaveChanges();
            System.Threading.Tasks.Task<int> SaveChangesAsync();
            System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
            System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
            System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
            System.Data.Entity.Database Database { get; }
            System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
            System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
            System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
            System.Data.Entity.DbSet Set(System.Type entityType);
            System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
            string ToString();
        }

        #endregion

        #region Database context

        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
        {
            public System.Data.Entity.DbSet<AccountCategory> AccountCategories { get; set; } // AccountCategory
            public System.Data.Entity.DbSet<AccountGroup> AccountGroups { get; set; } // AccountGroup
            public System.Data.Entity.DbSet<AccountMaster> AccountMasters { get; set; } // AccountMaster
            public System.Data.Entity.DbSet<BalanceSheetConfiguration> BalanceSheetConfigurations { get; set; } // BalanceSheetConfiguration
            public System.Data.Entity.DbSet<Branch> Branches { get; set; } // Branch
            public System.Data.Entity.DbSet<Company> Companies { get; set; } // Company
            public System.Data.Entity.DbSet<Customer> Customers { get; set; } // Customer

            static MyDbContext()
            {
                System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
            }

            public MyDbContext()
                : base("Name=MyDbContext")
            {
            }

            public MyDbContext(string connectionString)
                : base(connectionString)
            {
            }

            public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
                : base(connectionString, model)
            {
            }

            public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
                : base(existingConnection, contextOwnsConnection)
            {
            }

            public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
                : base(existingConnection, model, contextOwnsConnection)
            {
            }

            protected override void Dispose(bool disposing)
            {
                base.Dispose(disposing);
            }

            public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
            {
                var sqlValue = param.SqlValue;
                var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
                if (nullableValue != null)
                    return nullableValue.IsNull;
                return (sqlValue == null || sqlValue == System.DBNull.Value);
            }

            protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Configurations.Add(new AccountCategoryConfiguration());
                modelBuilder.Configurations.Add(new AccountGroupConfiguration());
                modelBuilder.Configurations.Add(new AccountMasterConfiguration());
                modelBuilder.Configurations.Add(new BalanceSheetConfigurationConfiguration());
                modelBuilder.Configurations.Add(new BranchConfiguration());
                modelBuilder.Configurations.Add(new CompanyConfiguration());
                modelBuilder.Configurations.Add(new CustomerConfiguration());
            }

            public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
            {
                modelBuilder.Configurations.Add(new AccountCategoryConfiguration(schema));
                modelBuilder.Configurations.Add(new AccountGroupConfiguration(schema));
                modelBuilder.Configurations.Add(new AccountMasterConfiguration(schema));
                modelBuilder.Configurations.Add(new BalanceSheetConfigurationConfiguration(schema));
                modelBuilder.Configurations.Add(new BranchConfiguration(schema));
                modelBuilder.Configurations.Add(new CompanyConfiguration(schema));
                modelBuilder.Configurations.Add(new CustomerConfiguration(schema));
                return modelBuilder;
            }
        }
        #endregion

        #region Database context factory

        public class MyDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<MyDbContext>
        {
            public MyDbContext Create()
            {
                return new MyDbContext();
            }
        }

        #endregion

        #region Fake Database context

        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class FakeMyDbContext : IMyDbContext
        {
            public System.Data.Entity.DbSet<AccountCategory> AccountCategories { get; set; }
            public System.Data.Entity.DbSet<AccountGroup> AccountGroups { get; set; }
            public System.Data.Entity.DbSet<AccountMaster> AccountMasters { get; set; }
            public System.Data.Entity.DbSet<BalanceSheetConfiguration> BalanceSheetConfigurations { get; set; }
            public System.Data.Entity.DbSet<Branch> Branches { get; set; }
            public System.Data.Entity.DbSet<Company> Companies { get; set; }
            public System.Data.Entity.DbSet<Customer> Customers { get; set; }

            public FakeMyDbContext()
            {
                AccountCategories = new FakeDbSet<AccountCategory>("Id");
                AccountGroups = new FakeDbSet<AccountGroup>("Id");
                AccountMasters = new FakeDbSet<AccountMaster>("Id");
                BalanceSheetConfigurations = new FakeDbSet<BalanceSheetConfiguration>("Id");
                Branches = new FakeDbSet<Branch>("Id");
                Companies = new FakeDbSet<Company>("Id");
                Customers = new FakeDbSet<Customer>("Id");
            }

            public int SaveChangesCount { get; private set; }
            public int SaveChanges()
            {
                ++SaveChangesCount;
                return 1;
            }

            public System.Threading.Tasks.Task<int> SaveChangesAsync()
            {
                ++SaveChangesCount;
                return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
            }

            public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
            {
                ++SaveChangesCount;
                return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
            }

            protected virtual void Dispose(bool disposing)
            {
            }

            public void Dispose()
            {
                Dispose(true);
            }

            private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
            public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
            private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
            public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
            private System.Data.Entity.Database _database;
            public System.Data.Entity.Database Database { get { return _database; } }
            public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
            {
                throw new System.NotImplementedException();
            }
            public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
            {
                throw new System.NotImplementedException();
            }
            public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
            {
                throw new System.NotImplementedException();
            }
            public System.Data.Entity.DbSet Set(System.Type entityType)
            {
                throw new System.NotImplementedException();
            }
            public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
            {
                throw new System.NotImplementedException();
            }
            public override string ToString()
            {
                throw new System.NotImplementedException();
            }

        }

        // ************************************************************************
        // Fake DbSet
        // Implementing Find:
        //      The Find method is difficult to implement in a generic fashion. If
        //      you need to test code that makes use of the Find method it is
        //      easiest to create a test DbSet for each of the entity types that
        //      need to support find. You can then write logic to find that
        //      particular type of entity, as shown below:
        //      public class FakeBlogDbSet : FakeDbSet<Blog>
        //      {
        //          public override Blog Find(params object[] keyValues)
        //          {
        //              var id = (int) keyValues.Single();
        //              return this.SingleOrDefault(b => b.BlogId == id);
        //          }
        //      }
        //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
        {
            private readonly System.Reflection.PropertyInfo[] _primaryKeys;
            private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
            private readonly IQueryable _query;

            public FakeDbSet()
            {
                _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
                _query = _data.AsQueryable();
            }

            public FakeDbSet(params string[] primaryKeys)
            {
                _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
                _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
                _query = _data.AsQueryable();
            }

            public override TEntity Find(params object[] keyValues)
            {
                if (_primaryKeys == null)
                    throw new System.ArgumentException("No primary keys defined");
                if (keyValues.Length != _primaryKeys.Length)
                    throw new System.ArgumentException("Incorrect number of keys passed to Find method");

                var keyQuery = this.AsQueryable();
                keyQuery = keyValues
                    .Select((t, i) => i)
                    .Aggregate(keyQuery,
                        (current, x) =>
                            current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

                return keyQuery.SingleOrDefault();
            }

            public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
            {
                return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
            }

            public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
            {
                return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
            }

            public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
            {
                if (entities == null) throw new System.ArgumentNullException("entities");
                var items = entities.ToList();
                foreach (var entity in items)
                {
                    _data.Add(entity);
                }
                return items;
            }

            public override TEntity Add(TEntity item)
            {
                if (item == null) throw new System.ArgumentNullException("item");
                _data.Add(item);
                return item;
            }

            public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
            {
                if (entities == null) throw new System.ArgumentNullException("entities");
                var items = entities.ToList();
                foreach (var entity in items)
                {
                    _data.Remove(entity);
                }
                return items;
            }

            public override TEntity Remove(TEntity item)
            {
                if (item == null) throw new System.ArgumentNullException("item");
                _data.Remove(item);
                return item;
            }

            public override TEntity Attach(TEntity item)
            {
                if (item == null) throw new System.ArgumentNullException("item");
                _data.Add(item);
                return item;
            }

            public override TEntity Create()
            {
                return System.Activator.CreateInstance<TEntity>();
            }

            public override TDerivedEntity Create<TDerivedEntity>()
            {
                return System.Activator.CreateInstance<TDerivedEntity>();
            }

            public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
            {
                get { return _data; }
            }

            System.Type IQueryable.ElementType
            {
                get { return _query.ElementType; }
            }

            System.Linq.Expressions.Expression IQueryable.Expression
            {
                get { return _query.Expression; }
            }

            IQueryProvider IQueryable.Provider
            {
                get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _data.GetEnumerator();
            }

            System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
            {
                return _data.GetEnumerator();
            }

            System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
            {
                return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
        {
            private readonly IQueryProvider _inner;

            public FakeDbAsyncQueryProvider(IQueryProvider inner)
            {
                _inner = inner;
            }

            public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
            {
                return new FakeDbAsyncEnumerable<TEntity>(expression);
            }

            public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
            {
                return new FakeDbAsyncEnumerable<TElement>(expression);
            }

            public object Execute(System.Linq.Expressions.Expression expression)
            {
                return _inner.Execute(expression);
            }

            public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
            {
                return _inner.Execute<TResult>(expression);
            }

            public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
            {
                return System.Threading.Tasks.Task.FromResult(Execute(expression));
            }

            public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
            {
                return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
        {
            public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
                : base(enumerable)
            { }

            public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
                : base(expression)
            { }

            public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
            {
                return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
            }

            System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
            {
                return GetAsyncEnumerator();
            }

            IQueryProvider IQueryable.Provider
            {
                get { return new FakeDbAsyncQueryProvider<T>(this); }
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
        {
            private readonly System.Collections.Generic.IEnumerator<T> _inner;

            public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
            {
                _inner = inner;
            }

            public void Dispose()
            {
                _inner.Dispose();
            }

            public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
            {
                return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
            }

            public T Current
            {
                get { return _inner.Current; }
            }

            object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
            {
                get { return Current; }
            }
        }

        #endregion

        #region POCO classes

        // AccountCategory
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountCategory
        {
            public int Id { get; set; } // Id (Primary key)
            public string CategoryCode { get; set; } // CategoryCode (length: 100)
            public string CategoryName { get; set; } // CategoryName (length: 150)
            public int? GroupId { get; set; } // GroupId
            public int? CompanyId { get; set; } // CompanyId

            // Reverse navigation

            /// <summary>
            /// Child AccountMasters where [AccountMaster].[CategoryId] point to this entity (FK_AccountMaster_AccountCategory)
            /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountMaster> AccountMasters { get; set; } // AccountMaster.FK_AccountMaster_AccountCategory

            // Foreign keys

            /// <summary>
            /// Parent AccountGroup pointed by [AccountCategory].([GroupId]) (FK_AccountCategory_AccountGroup)
            /// </summary>
            public virtual AccountGroup AccountGroup { get; set; } // FK_AccountCategory_AccountGroup

            /// <summary>
            /// Parent Company pointed by [AccountCategory].([CompanyId]) (FK_AccountCategory_Company)
            /// </summary>
            public virtual Company Company { get; set; } // FK_AccountCategory_Company

            public AccountCategory()
            {
                AccountMasters = new System.Collections.Generic.List<AccountMaster>();
            }
        }

        // AccountGroup
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountGroup
        {
            public int Id { get; set; } // Id (Primary key)
            public string GroupCode { get; set; } // GroupCode (length: 50)
            public string GroupName { get; set; } // GroupName (length: 200)
            public int? CompanyId { get; set; } // CompanyId
            public bool? IsActive { get; set; } // IsActive

            // Reverse navigation

            /// <summary>
            /// Child AccountCategories where [AccountCategory].[GroupId] point to this entity (FK_AccountCategory_AccountGroup)
            /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountCategory> AccountCategories { get; set; } // AccountCategory.FK_AccountCategory_AccountGroup
                                                                                                                   /// <summary>
                                                                                                                   /// Child AccountMasters where [AccountMaster].[GroupId] point to this entity (FK_AccountMaster_AccountGroup)
                                                                                                                   /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountMaster> AccountMasters { get; set; } // AccountMaster.FK_AccountMaster_AccountGroup

            // Foreign keys

            /// <summary>
            /// Parent Company pointed by [AccountGroup].([CompanyId]) (FK_AccountGroup_Company)
            /// </summary>
            public virtual Company Company { get; set; } // FK_AccountGroup_Company

            public AccountGroup()
            {
                AccountCategories = new System.Collections.Generic.List<AccountCategory>();
                AccountMasters = new System.Collections.Generic.List<AccountMaster>();
            }
        }

        // AccountMaster
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountMaster
        {
            public int Id { get; set; } // Id (Primary key)
            public string AccountCode { get; set; } // AccountCode (length: 50)
            public string AccountName { get; set; } // AccountName
            public string Description { get; set; } // Description
            public int? GroupId { get; set; } // GroupId
            public int? CategoryId { get; set; } // CategoryId
            public int? CompanyId { get; set; } // CompanyId
            public bool? IsTransactional { get; set; } // IsTransactional
            public System.DateTime? OpeningBalanceDate { get; set; } // OpeningBalanceDate
            public bool? IsBankAccount { get; set; } // IsBankAccount
            public bool? IsSubCode { get; set; } // IsSubCode
            public string SubCodeId { get; set; } // SubCodeId (length: 50)
            public decimal? Debit { get; set; } // Debit
            public decimal? Credit { get; set; } // Credit
            public string BankName { get; set; } // BankName (length: 200)
            public string BranchName { get; set; } // BranchName (length: 200)
            public string BankAccountNo { get; set; } // BankAccountNo (length: 100)
            public string SupplierCode { get; set; } // SupplierCode (length: 50)
            public string SupplierName { get; set; } // SupplierName (length: 100)
            public string SupplierCompany { get; set; } // SupplierCompany (length: 200)
            public string ClientCode { get; set; } // ClientCode (length: 50)
            public string ClientName { get; set; } // ClientName (length: 100)
            public string ClientCompany { get; set; } // ClientCompany (length: 200)
            public string CPhone { get; set; } // CPhone (length: 20)
            public string Phone { get; set; } // Phone (length: 20)
            public string Remarks { get; set; } // Remarks (length: 500)
            public bool IsActive { get; set; } // IsActive
            public bool? IsDeleted { get; set; } // IsDeleted

            // Foreign keys

            /// <summary>
            /// Parent AccountCategory pointed by [AccountMaster].([CategoryId]) (FK_AccountMaster_AccountCategory)
            /// </summary>
            public virtual AccountCategory AccountCategory { get; set; } // FK_AccountMaster_AccountCategory

            /// <summary>
            /// Parent AccountGroup pointed by [AccountMaster].([GroupId]) (FK_AccountMaster_AccountGroup)
            /// </summary>
            public virtual AccountGroup AccountGroup { get; set; } // FK_AccountMaster_AccountGroup

            /// <summary>
            /// Parent Company pointed by [AccountMaster].([CompanyId]) (FK_AccountMaster_Company)
            /// </summary>
            public virtual Company Company { get; set; } // FK_AccountMaster_Company
        }

        // BalanceSheetConfiguration
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class BalanceSheetConfiguration
        {
            public int Id { get; set; } // Id (Primary key)
            public int? GroupId { get; set; } // GroupId
            public int? CategoryId { get; set; } // CategoryId
            public string Name { get; set; } // Name (length: 100)
            public bool? IsActive { get; set; } // IsActive
        }

        // Branch
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class Branch
        {
            public int Id { get; set; } // Id (Primary key)
            public int CompanyId { get; set; } // CompanyId
            public string BranchName { get; set; } // BranchName (length: 150)
            public short BranchCode { get; set; } // BranchCode
            public string Address { get; set; } // Address (length: 150)
            public string Phone { get; set; } // Phone (length: 15)
            public string Fax { get; set; } // Fax (length: 15)
            public string Email { get; set; } // Email (length: 50)
            public bool IsDeleted { get; set; } // IsDeleted

            // Reverse navigation

            /// <summary>
            /// Child Customers where [Customer].[BranchId] point to this entity (FK_Customer_Customer)
            /// </summary>
            public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_Customer

            // Foreign keys

            /// <summary>
            /// Parent Company pointed by [Branch].([CompanyId]) (FK_Branch_Branch)
            /// </summary>
            public virtual Company Company { get; set; } // FK_Branch_Branch

            public Branch()
            {
                Customers = new System.Collections.Generic.List<Customer>();
            }
        }

        // Company
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class Company
        {
            public int Id { get; set; } // Id (Primary key)
            public string CompanyName { get; set; } // CompanyName (length: 100)
            public string Logo { get; set; } // Logo (length: 300)
            public string Address { get; set; } // Address (length: 150)
            public string Phone { get; set; } // Phone (length: 15)
            public string Fax { get; set; } // Fax (length: 15)
            public string Email { get; set; } // Email (length: 50)
            public bool IsDeleted { get; set; } // IsDeleted
            public int CreatedBy { get; set; } // CreatedBy
            public System.DateTime CreatedDate { get; set; } // CreatedDate
            public int? UpdatedBy { get; set; } // UpdatedBy
            public System.DateTime? UpdatedDate { get; set; } // UpdatedDate

            // Reverse navigation

            /// <summary>
            /// Child AccountCategories where [AccountCategory].[CompanyId] point to this entity (FK_AccountCategory_Company)
            /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountCategory> AccountCategories { get; set; } // AccountCategory.FK_AccountCategory_Company
                                                                                                                   /// <summary>
                                                                                                                   /// Child AccountGroups where [AccountGroup].[CompanyId] point to this entity (FK_AccountGroup_Company)
                                                                                                                   /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountGroup> AccountGroups { get; set; } // AccountGroup.FK_AccountGroup_Company
                                                                                                            /// <summary>
                                                                                                            /// Child AccountMasters where [AccountMaster].[CompanyId] point to this entity (FK_AccountMaster_Company)
                                                                                                            /// </summary>
            public virtual System.Collections.Generic.ICollection<AccountMaster> AccountMasters { get; set; } // AccountMaster.FK_AccountMaster_Company
                                                                                                              /// <summary>
                                                                                                              /// Child Branches where [Branch].[CompanyId] point to this entity (FK_Branch_Branch)
                                                                                                              /// </summary>
            public virtual System.Collections.Generic.ICollection<Branch> Branches { get; set; } // Branch.FK_Branch_Branch
                                                                                                 /// <summary>
                                                                                                 /// Child Customers where [Customer].[CompanyId] point to this entity (FK_Customer_Company)
                                                                                                 /// </summary>
            public virtual System.Collections.Generic.ICollection<Customer> Customers { get; set; } // Customer.FK_Customer_Company

            public Company()
            {
                AccountCategories = new System.Collections.Generic.List<AccountCategory>();
                AccountGroups = new System.Collections.Generic.List<AccountGroup>();
                AccountMasters = new System.Collections.Generic.List<AccountMaster>();
                Branches = new System.Collections.Generic.List<Branch>();
                Customers = new System.Collections.Generic.List<Customer>();
            }
        }

        // Customer
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class Customer
        {
            public int Id { get; set; } // Id (Primary key)
            public string CustomerName { get; set; } // CustomerName (length: 100)
            public string CustomerImage { get; set; } // CustomerImage
            public string FatherName { get; set; } // FatherName (length: 100)
            public string MotherName { get; set; } // MotherName (length: 100)
            public string SpouseName { get; set; } // SpouseName (length: 100)
            public string Gender { get; set; } // Gender (length: 20)
            public System.DateTime? CustomerEntryDate { get; set; } // CustomerEntryDate
            public System.DateTime? DateOfBirth { get; set; } // DateOfBirth
            public System.DateTime? TradeLicenseDate { get; set; } // TradeLicenseDate
            public string TradeLicenseNo { get; set; } // TradeLicenseNo (length: 50)
            public string Nationality { get; set; } // Nationality (length: 100)
            public string RegistrationAuthority { get; set; } // RegistrationAuthority (length: 50)
            public string RegistrationNo { get; set; } // RegistrationNo (length: 50)
            public string BirthCertificateNo { get; set; } // BirthCertificateNo (length: 25)
            public string NationalId { get; set; } // NationalId (length: 25)
            public string OccupationAndPosition { get; set; } // OccupationAndPosition (length: 100)
            public string Position { get; set; } // Position (length: 100)
            public string PassportNo { get; set; } // PassportNo (length: 50)
            public System.DateTime? PassportExpireDate { get; set; } // PassportExpireDate
            public string TinNo { get; set; } // TINNo (length: 50)
            public string DrivingLicenseNo { get; set; } // DrivingLicenseNo (length: 50)
            public string PresentAddress { get; set; } // PresentAddress (length: 300)
            public string PermanentAddress { get; set; } // PermanentAddress (length: 300)
            public string OfficeAddress { get; set; } // OfficeAddress (length: 300)
            public string Mobile { get; set; } // Mobile (length: 15)
            public string AnotherCellNo { get; set; } // AnotherCellNo (length: 15)
            public string Home { get; set; } // Home (length: 15)
            public string Office { get; set; } // Office (length: 15)
            public string Email { get; set; } // Email (length: 50)
            public string CustomerIncomeSource { get; set; } // CustomerIncomeSource (length: 50)
            public string TradeLicAuthority { get; set; } // TradeLicAuthority (length: 50)
            public int? BranchId { get; set; } // BranchId
            public int? CompanyId { get; set; } // CompanyId
            public bool? IsApproved { get; set; } // IsApproved
            public bool IsActive { get; set; } // IsActive
            public bool? IsDeleted { get; set; } // IsDeleted
            public short CreatedBy { get; set; } // CreatedBy
            public System.DateTime CreatedDate { get; set; } // CreatedDate
            public short? UpdatedBy { get; set; } // UpdatedBy
            public System.DateTime? UpdatedDate { get; set; } // UpdatedDate
            public byte? SortedBy { get; set; } // SortedBy
            public string Remarks { get; set; } // Remarks (length: 500)

            // Foreign keys

            /// <summary>
            /// Parent Branch pointed by [Customer].([BranchId]) (FK_Customer_Customer)
            /// </summary>
            public virtual Branch Branch { get; set; } // FK_Customer_Customer

            /// <summary>
            /// Parent Company pointed by [Customer].([CompanyId]) (FK_Customer_Company)
            /// </summary>
            public virtual Company Company { get; set; } // FK_Customer_Company
        }

        #endregion

        #region POCO Configuration

        // AccountCategory
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountCategory>
        {
            public AccountCategoryConfiguration()
                : this("dbo")
            {
            }

            public AccountCategoryConfiguration(string schema)
            {
                ToTable("AccountCategory", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.CategoryCode).HasColumnName(@"CategoryCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.CategoryName).HasColumnName(@"CategoryName").HasColumnType("nvarchar").IsOptional().HasMaxLength(150);
                Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsOptional();
                Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsOptional();

                // Foreign keys
                HasOptional(a => a.AccountGroup).WithMany(b => b.AccountCategories).HasForeignKey(c => c.GroupId).WillCascadeOnDelete(false); // FK_AccountCategory_AccountGroup
                HasOptional(a => a.Company).WithMany(b => b.AccountCategories).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_AccountCategory_Company
            }
        }

        // AccountGroup
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountGroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountGroup>
        {
            public AccountGroupConfiguration()
                : this("dbo")
            {
            }

            public AccountGroupConfiguration(string schema)
            {
                ToTable("AccountGroup", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.GroupCode).HasColumnName(@"GroupCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.GroupName).HasColumnName(@"GroupName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
                Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsOptional();
                Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();

                // Foreign keys
                HasOptional(a => a.Company).WithMany(b => b.AccountGroups).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_AccountGroup_Company
            }
        }

        // AccountMaster
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class AccountMasterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AccountMaster>
        {
            public AccountMasterConfiguration()
                : this("dbo")
            {
            }

            public AccountMasterConfiguration(string schema)
            {
                ToTable("AccountMaster", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.AccountCode).HasColumnName(@"AccountCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
                Property(x => x.AccountName).HasColumnName(@"AccountName").HasColumnType("nvarchar(max)").IsRequired();
                Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(max)").IsOptional();
                Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsOptional();
                Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsOptional();
                Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsOptional();
                Property(x => x.IsTransactional).HasColumnName(@"IsTransactional").HasColumnType("bit").IsOptional();
                Property(x => x.OpeningBalanceDate).HasColumnName(@"OpeningBalanceDate").HasColumnType("datetime").IsOptional();
                Property(x => x.IsBankAccount).HasColumnName(@"IsBankAccount").HasColumnType("bit").IsOptional();
                Property(x => x.IsSubCode).HasColumnName(@"IsSubCode").HasColumnType("bit").IsOptional();
                Property(x => x.SubCodeId).HasColumnName(@"SubCodeId").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.Debit).HasColumnName(@"Debit").HasColumnType("numeric").IsOptional().HasPrecision(18, 2);
                Property(x => x.Credit).HasColumnName(@"Credit").HasColumnType("numeric").IsOptional().HasPrecision(18, 2);
                Property(x => x.BankName).HasColumnName(@"BankName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
                Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
                Property(x => x.BankAccountNo).HasColumnName(@"BankAccountNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.SupplierCode).HasColumnName(@"SupplierCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.SupplierName).HasColumnName(@"SupplierName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.SupplierCompany).HasColumnName(@"SupplierCompany").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
                Property(x => x.ClientCode).HasColumnName(@"ClientCode").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.ClientName).HasColumnName(@"ClientName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.ClientCompany).HasColumnName(@"ClientCompany").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
                Property(x => x.CPhone).HasColumnName(@"CPhone").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
                Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
                Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
                Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
                Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();

                // Foreign keys
                HasOptional(a => a.AccountCategory).WithMany(b => b.AccountMasters).HasForeignKey(c => c.CategoryId).WillCascadeOnDelete(false); // FK_AccountMaster_AccountCategory
                HasOptional(a => a.AccountGroup).WithMany(b => b.AccountMasters).HasForeignKey(c => c.GroupId).WillCascadeOnDelete(false); // FK_AccountMaster_AccountGroup
                HasOptional(a => a.Company).WithMany(b => b.AccountMasters).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_AccountMaster_Company
            }
        }

        // BalanceSheetConfiguration
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class BalanceSheetConfigurationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BalanceSheetConfiguration>
        {
            public BalanceSheetConfigurationConfiguration()
                : this("dbo")
            {
            }

            public BalanceSheetConfigurationConfiguration(string schema)
            {
                ToTable("BalanceSheetConfiguration", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.GroupId).HasColumnName(@"GroupId").HasColumnType("int").IsOptional();
                Property(x => x.CategoryId).HasColumnName(@"CategoryId").HasColumnType("int").IsOptional();
                Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsOptional();
            }
        }

        // Branch
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class BranchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Branch>
        {
            public BranchConfiguration()
                : this("dbo")
            {
            }

            public BranchConfiguration(string schema)
            {
                ToTable("Branch", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsRequired();
                Property(x => x.BranchName).HasColumnName(@"BranchName").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
                Property(x => x.BranchCode).HasColumnName(@"BranchCode").HasColumnType("smallint").IsRequired();
                Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
                Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();

                // Foreign keys
                HasRequired(a => a.Company).WithMany(b => b.Branches).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Branch_Branch
            }
        }

        // Company
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class CompanyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Company>
        {
            public CompanyConfiguration()
                : this("dbo")
            {
            }

            public CompanyConfiguration(string schema)
            {
                ToTable("Company", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
                Property(x => x.Logo).HasColumnName(@"Logo").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
                Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar").IsRequired().HasMaxLength(150);
                Property(x => x.Phone).HasColumnName(@"Phone").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Fax).HasColumnName(@"Fax").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsRequired();
                Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("int").IsRequired();
                Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
                Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("int").IsOptional();
                Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
            }
        }

        // Customer
        [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
        public class CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Customer>
        {
            public CustomerConfiguration()
                : this("dbo")
            {
            }

            public CustomerConfiguration(string schema)
            {
                ToTable("Customer", schema);
                HasKey(x => x.Id);

                Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
                Property(x => x.CustomerName).HasColumnName(@"CustomerName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.CustomerImage).HasColumnName(@"CustomerImage").HasColumnType("nvarchar(max)").IsOptional();
                Property(x => x.FatherName).HasColumnName(@"FatherName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.MotherName).HasColumnName(@"MotherName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.SpouseName).HasColumnName(@"SpouseName").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
                Property(x => x.CustomerEntryDate).HasColumnName(@"CustomerEntryDate").HasColumnType("datetime").IsOptional();
                Property(x => x.DateOfBirth).HasColumnName(@"DateOfBirth").HasColumnType("datetime").IsOptional();
                Property(x => x.TradeLicenseDate).HasColumnName(@"TradeLicenseDate").HasColumnType("datetime").IsOptional();
                Property(x => x.TradeLicenseNo).HasColumnName(@"TradeLicenseNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.Nationality).HasColumnName(@"Nationality").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.RegistrationAuthority).HasColumnName(@"RegistrationAuthority").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.RegistrationNo).HasColumnName(@"RegistrationNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.BirthCertificateNo).HasColumnName(@"BirthCertificateNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
                Property(x => x.NationalId).HasColumnName(@"NationalId").HasColumnType("nvarchar").IsOptional().HasMaxLength(25);
                Property(x => x.OccupationAndPosition).HasColumnName(@"OccupationAndPosition").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.Position).HasColumnName(@"Position").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
                Property(x => x.PassportNo).HasColumnName(@"PassportNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.PassportExpireDate).HasColumnName(@"PassportExpireDate").HasColumnType("datetime").IsOptional();
                Property(x => x.TinNo).HasColumnName(@"TINNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.DrivingLicenseNo).HasColumnName(@"DrivingLicenseNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.PresentAddress).HasColumnName(@"PresentAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
                Property(x => x.PermanentAddress).HasColumnName(@"PermanentAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
                Property(x => x.OfficeAddress).HasColumnName(@"OfficeAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(300);
                Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.AnotherCellNo).HasColumnName(@"AnotherCellNo").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Home).HasColumnName(@"Home").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Office).HasColumnName(@"Office").HasColumnType("nvarchar").IsOptional().HasMaxLength(15);
                Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.CustomerIncomeSource).HasColumnName(@"CustomerIncomeSource").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.TradeLicAuthority).HasColumnName(@"TradeLicAuthority").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
                Property(x => x.BranchId).HasColumnName(@"BranchId").HasColumnType("int").IsOptional();
                Property(x => x.CompanyId).HasColumnName(@"CompanyId").HasColumnType("int").IsOptional();
                Property(x => x.IsApproved).HasColumnName(@"IsApproved").HasColumnType("bit").IsOptional();
                Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("bit").IsRequired();
                Property(x => x.IsDeleted).HasColumnName(@"IsDeleted").HasColumnType("bit").IsOptional();
                Property(x => x.CreatedBy).HasColumnName(@"CreatedBy").HasColumnType("smallint").IsRequired();
                Property(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType("datetime").IsRequired();
                Property(x => x.UpdatedBy).HasColumnName(@"UpdatedBy").HasColumnType("smallint").IsOptional();
                Property(x => x.UpdatedDate).HasColumnName(@"UpdatedDate").HasColumnType("datetime").IsOptional();
                Property(x => x.SortedBy).HasColumnName(@"SortedBy").HasColumnType("tinyint").IsOptional();
                Property(x => x.Remarks).HasColumnName(@"Remarks").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);

                // Foreign keys
                HasOptional(a => a.Branch).WithMany(b => b.Customers).HasForeignKey(c => c.BranchId).WillCascadeOnDelete(false); // FK_Customer_Customer
                HasOptional(a => a.Company).WithMany(b => b.Customers).HasForeignKey(c => c.CompanyId).WillCascadeOnDelete(false); // FK_Customer_Company
            }
        }

        #endregion

    }
    // </auto-generated>


}
